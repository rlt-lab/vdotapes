{"kind": "interface", "name": "ThumbnailConfig", "js_doc": "/** Configuration for thumbnail generation */\n", "def": "width: number\\nheight: number\\nquality: number\\nformat: string", "original_name": "ThumbnailConfig"}
{"kind": "interface", "name": "ThumbnailResult", "js_doc": "/** Result of thumbnail generation */\n", "def": "success: boolean\\nthumbnailPath?: string\\nwidth: number\\nheight: number\\nformat: string\\nfileSize: number\\ntimestamp: number\\nerror?: string", "original_name": "ThumbnailResult"}
{"kind": "interface", "name": "VideoMetadata", "js_doc": "/** Video metadata extracted from file */\n", "def": "duration: number\\nwidth: number\\nheight: number\\ncodec: string\\nbitrate: number\\nfps: number", "original_name": "VideoMetadata"}
{"kind": "interface", "name": "GenerationProgress", "js_doc": "/** Progress information during thumbnail generation */\n", "def": "isGenerating: boolean\\ncurrentFile?: string\\nprogress: number", "original_name": "GenerationProgress"}
{"kind": "interface", "name": "CacheStats", "js_doc": "/** Cache statistics */\n", "def": "totalThumbnails: number\\ntotalSizeBytes: number\\ncacheDir: string", "original_name": "CacheStats"}
{"kind": "struct", "name": "ThumbnailGeneratorNative", "js_doc": "/** ThumbnailGeneratorNative - Rust-based thumbnail generator using FFmpeg */\n", "def": "", "original_name": "ThumbnailGeneratorNative"}
{"kind": "impl", "name": "ThumbnailGeneratorNative", "js_doc": "", "def": "/**\n * Create a new ThumbnailGeneratorNative instance\n * \n * # Arguments\n * * `cache_dir` - Optional cache directory path. Defaults to system temp dir\n */\n constructor(cacheDir?: string | undefined | null)\\n/** Initialize the thumbnail generator */\n initialize(): Promise<void>\\n/**\n * Generate thumbnail for video\n * \n * # Arguments\n * * `video_path` - Path to the video file\n * * `timestamp` - Optional timestamp in seconds. If None, uses smart selection\n * \n * # Returns\n * ThumbnailResult with path to generated thumbnail\n */\n generateThumbnail(videoPath: string, timestamp?: number | undefined | null): Promise<ThumbnailResult>\\n/**\n * Get thumbnail path (from cache only, doesn't generate)\n * \n * # Arguments\n * * `video_path` - Path to the video file\n * * `timestamp` - Optional timestamp in seconds\n * \n * # Returns\n * Path to cached thumbnail or None if not cached\n */\n getThumbnailPath(videoPath: string, timestamp?: number | undefined | null): Promise<string | null>\\n/**\n * Extract video metadata without generating thumbnail\n * \n * # Arguments\n * * `video_path` - Path to the video file\n * \n * # Returns\n * VideoMetadata containing duration, dimensions, codec info, etc.\n */\n getVideoMetadata(videoPath: string): Promise<VideoMetadata>\\n/**\n * Batch generate thumbnails\n * \n * # Arguments\n * * `video_paths` - List of video file paths\n * \n * # Returns\n * Vector of ThumbnailResults\n */\n generateBatch(videoPaths: Array<string>): Promise<Array<ThumbnailResult>>\\n/** Clear thumbnail cache */\n clearCache(): Promise<void>\\n/**\n * Get cache statistics\n * \n * # Returns\n * CacheStats with total thumbnails, size, and cache directory\n */\n getCacheStats(): Promise<CacheStats>"}
{"kind": "fn", "name": "generateThumbnailSimple", "js_doc": "/** Standalone function to generate a single thumbnail (simpler API) */\n", "def": "function generateThumbnailSimple(videoPath: string, outputPath: string, timestamp?: number | undefined | null): Promise<ThumbnailResult>"}
{"kind": "fn", "name": "isFfmpegAvailable", "js_doc": "/** Check if FFmpeg is available on the system */\n", "def": "function isFfmpegAvailable(): boolean"}
