/* auto-generated by NAPI-RS */
/* eslint-disable */
/** ThumbnailGeneratorNative - Rust-based thumbnail generator using FFmpeg */
export declare class ThumbnailGeneratorNative {
  /**
   * Create a new ThumbnailGeneratorNative instance
   *
   * # Arguments
   * * `cache_dir` - Optional cache directory path. Defaults to system temp dir
   */
  constructor(cacheDir?: string | undefined | null)
  /** Initialize the thumbnail generator */
  initialize(): Promise<void>
  /**
   * Generate thumbnail for video
   *
   * # Arguments
   * * `video_path` - Path to the video file
   * * `timestamp` - Optional timestamp in seconds. If None, uses smart selection
   *
   * # Returns
   * ThumbnailResult with path to generated thumbnail
   */
  generateThumbnail(videoPath: string, timestamp?: number | undefined | null): Promise<ThumbnailResult>
  /**
   * Get thumbnail path (from cache only, doesn't generate)
   *
   * # Arguments
   * * `video_path` - Path to the video file
   * * `timestamp` - Optional timestamp in seconds
   *
   * # Returns
   * Path to cached thumbnail or None if not cached
   */
  getThumbnailPath(videoPath: string, timestamp?: number | undefined | null): Promise<string | null>
  /**
   * Extract video metadata without generating thumbnail
   *
   * # Arguments
   * * `video_path` - Path to the video file
   *
   * # Returns
   * VideoMetadata containing duration, dimensions, codec info, etc.
   */
  getVideoMetadata(videoPath: string): Promise<VideoMetadata>
  /**
   * Batch generate thumbnails
   *
   * # Arguments
   * * `video_paths` - List of video file paths
   *
   * # Returns
   * Vector of ThumbnailResults
   */
  generateBatch(videoPaths: Array<string>): Promise<Array<ThumbnailResult>>
  /** Clear thumbnail cache */
  clearCache(): Promise<void>
  /**
   * Get cache statistics
   *
   * # Returns
   * CacheStats with total thumbnails, size, and cache directory
   */
  getCacheStats(): Promise<CacheStats>
}

/** Cache statistics */
export interface CacheStats {
  totalThumbnails: number
  totalSizeBytes: number
  cacheDir: string
}

/** Standalone function to generate a single thumbnail (simpler API) */
export declare function generateThumbnailSimple(videoPath: string, outputPath: string, timestamp?: number | undefined | null): Promise<ThumbnailResult>

/** Progress information during thumbnail generation */
export interface GenerationProgress {
  isGenerating: boolean
  currentFile?: string
  progress: number
}

/** Check if FFmpeg is available on the system */
export declare function isFfmpegAvailable(): boolean

/** Configuration for thumbnail generation */
export interface ThumbnailConfig {
  width: number
  height: number
  quality: number
  format: string
}

/** Result of thumbnail generation */
export interface ThumbnailResult {
  success: boolean
  thumbnailPath?: string
  width: number
  height: number
  format: string
  fileSize: number
  timestamp: number
  error?: string
}

/** Video metadata extracted from file */
export interface VideoMetadata {
  duration: number
  width: number
  height: number
  codec: string
  bitrate: number
  fps: number
}
